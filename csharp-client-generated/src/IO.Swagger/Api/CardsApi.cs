/* 
 * UiBank
 *
 * Sample banking API used for demoing UiPath Testing Automation. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: andrei.barbu@uipath.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ICardsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a new bank card for an account
        /// </summary>
        /// <remarks>
        /// Add a new card for the specified account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Bank card details</param>
        /// <param name="accountId">Id of account</param>
        /// <returns>BankCard</returns>
        BankCard AddBankCard (BankCard body, long? accountId);

        /// <summary>
        /// Add a new bank card for an account
        /// </summary>
        /// <remarks>
        /// Add a new card for the specified account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Bank card details</param>
        /// <param name="accountId">Id of account</param>
        /// <returns>ApiResponse of BankCard</returns>
        ApiResponse<BankCard> AddBankCardWithHttpInfo (BankCard body, long? accountId);
        /// <summary>
        /// Return all bank cards for an account
        /// </summary>
        /// <remarks>
        /// Return all cards for the specified account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">Id of the card</param>
        /// <returns>BankCard</returns>
        BankCard GetCard (long? cardId);

        /// <summary>
        /// Return all bank cards for an account
        /// </summary>
        /// <remarks>
        /// Return all cards for the specified account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">Id of the card</param>
        /// <returns>ApiResponse of BankCard</returns>
        ApiResponse<BankCard> GetCardWithHttpInfo (long? cardId);
        /// <summary>
        /// Return all bank cards for an account
        /// </summary>
        /// <remarks>
        /// Return all cards for the specified account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Id of account</param>
        /// <returns>List&lt;BankCard&gt;</returns>
        List<BankCard> ListBankCards (long? accountId);

        /// <summary>
        /// Return all bank cards for an account
        /// </summary>
        /// <remarks>
        /// Return all cards for the specified account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Id of account</param>
        /// <returns>ApiResponse of List&lt;BankCard&gt;</returns>
        ApiResponse<List<BankCard>> ListBankCardsWithHttpInfo (long? accountId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add a new bank card for an account
        /// </summary>
        /// <remarks>
        /// Add a new card for the specified account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Bank card details</param>
        /// <param name="accountId">Id of account</param>
        /// <returns>Task of BankCard</returns>
        System.Threading.Tasks.Task<BankCard> AddBankCardAsync (BankCard body, long? accountId);

        /// <summary>
        /// Add a new bank card for an account
        /// </summary>
        /// <remarks>
        /// Add a new card for the specified account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Bank card details</param>
        /// <param name="accountId">Id of account</param>
        /// <returns>Task of ApiResponse (BankCard)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankCard>> AddBankCardAsyncWithHttpInfo (BankCard body, long? accountId);
        /// <summary>
        /// Return all bank cards for an account
        /// </summary>
        /// <remarks>
        /// Return all cards for the specified account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">Id of the card</param>
        /// <returns>Task of BankCard</returns>
        System.Threading.Tasks.Task<BankCard> GetCardAsync (long? cardId);

        /// <summary>
        /// Return all bank cards for an account
        /// </summary>
        /// <remarks>
        /// Return all cards for the specified account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">Id of the card</param>
        /// <returns>Task of ApiResponse (BankCard)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankCard>> GetCardAsyncWithHttpInfo (long? cardId);
        /// <summary>
        /// Return all bank cards for an account
        /// </summary>
        /// <remarks>
        /// Return all cards for the specified account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Id of account</param>
        /// <returns>Task of List&lt;BankCard&gt;</returns>
        System.Threading.Tasks.Task<List<BankCard>> ListBankCardsAsync (long? accountId);

        /// <summary>
        /// Return all bank cards for an account
        /// </summary>
        /// <remarks>
        /// Return all cards for the specified account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Id of account</param>
        /// <returns>Task of ApiResponse (List&lt;BankCard&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BankCard>>> ListBankCardsAsyncWithHttpInfo (long? accountId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class CardsApi : ICardsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CardsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CardsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CardsApi"/> class
        /// </summary>
        /// <returns></returns>
        public CardsApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CardsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CardsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add a new bank card for an account Add a new card for the specified account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Bank card details</param>
        /// <param name="accountId">Id of account</param>
        /// <returns>BankCard</returns>
        public BankCard AddBankCard (BankCard body, long? accountId)
        {
             ApiResponse<BankCard> localVarResponse = AddBankCardWithHttpInfo(body, accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new bank card for an account Add a new card for the specified account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Bank card details</param>
        /// <param name="accountId">Id of account</param>
        /// <returns>ApiResponse of BankCard</returns>
        public ApiResponse< BankCard > AddBankCardWithHttpInfo (BankCard body, long? accountId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->AddBankCard");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CardsApi->AddBankCard");

            var localVarPath = "/accounts/{accountId}/cards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearerAuth) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddBankCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BankCard>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BankCard) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BankCard)));
        }

        /// <summary>
        /// Add a new bank card for an account Add a new card for the specified account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Bank card details</param>
        /// <param name="accountId">Id of account</param>
        /// <returns>Task of BankCard</returns>
        public async System.Threading.Tasks.Task<BankCard> AddBankCardAsync (BankCard body, long? accountId)
        {
             ApiResponse<BankCard> localVarResponse = await AddBankCardAsyncWithHttpInfo(body, accountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a new bank card for an account Add a new card for the specified account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Bank card details</param>
        /// <param name="accountId">Id of account</param>
        /// <returns>Task of ApiResponse (BankCard)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BankCard>> AddBankCardAsyncWithHttpInfo (BankCard body, long? accountId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->AddBankCard");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CardsApi->AddBankCard");

            var localVarPath = "/accounts/{accountId}/cards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearerAuth) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddBankCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BankCard>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BankCard) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BankCard)));
        }

        /// <summary>
        /// Return all bank cards for an account Return all cards for the specified account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">Id of the card</param>
        /// <returns>BankCard</returns>
        public BankCard GetCard (long? cardId)
        {
             ApiResponse<BankCard> localVarResponse = GetCardWithHttpInfo(cardId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return all bank cards for an account Return all cards for the specified account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">Id of the card</param>
        /// <returns>ApiResponse of BankCard</returns>
        public ApiResponse< BankCard > GetCardWithHttpInfo (long? cardId)
        {
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardsApi->GetCard");

            var localVarPath = "/cards/{cardId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("cardId", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            // authentication (bearerAuth) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BankCard>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BankCard) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BankCard)));
        }

        /// <summary>
        /// Return all bank cards for an account Return all cards for the specified account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">Id of the card</param>
        /// <returns>Task of BankCard</returns>
        public async System.Threading.Tasks.Task<BankCard> GetCardAsync (long? cardId)
        {
             ApiResponse<BankCard> localVarResponse = await GetCardAsyncWithHttpInfo(cardId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return all bank cards for an account Return all cards for the specified account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">Id of the card</param>
        /// <returns>Task of ApiResponse (BankCard)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BankCard>> GetCardAsyncWithHttpInfo (long? cardId)
        {
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardsApi->GetCard");

            var localVarPath = "/cards/{cardId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("cardId", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            // authentication (bearerAuth) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BankCard>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BankCard) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BankCard)));
        }

        /// <summary>
        /// Return all bank cards for an account Return all cards for the specified account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Id of account</param>
        /// <returns>List&lt;BankCard&gt;</returns>
        public List<BankCard> ListBankCards (long? accountId)
        {
             ApiResponse<List<BankCard>> localVarResponse = ListBankCardsWithHttpInfo(accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return all bank cards for an account Return all cards for the specified account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Id of account</param>
        /// <returns>ApiResponse of List&lt;BankCard&gt;</returns>
        public ApiResponse< List<BankCard> > ListBankCardsWithHttpInfo (long? accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CardsApi->ListBankCards");

            var localVarPath = "/accounts/{accountId}/cards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            // authentication (bearerAuth) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListBankCards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BankCard>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BankCard>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BankCard>)));
        }

        /// <summary>
        /// Return all bank cards for an account Return all cards for the specified account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Id of account</param>
        /// <returns>Task of List&lt;BankCard&gt;</returns>
        public async System.Threading.Tasks.Task<List<BankCard>> ListBankCardsAsync (long? accountId)
        {
             ApiResponse<List<BankCard>> localVarResponse = await ListBankCardsAsyncWithHttpInfo(accountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return all bank cards for an account Return all cards for the specified account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Id of account</param>
        /// <returns>Task of ApiResponse (List&lt;BankCard&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BankCard>>> ListBankCardsAsyncWithHttpInfo (long? accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CardsApi->ListBankCards");

            var localVarPath = "/accounts/{accountId}/cards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            // authentication (bearerAuth) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListBankCards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BankCard>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BankCard>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BankCard>)));
        }

    }
}
