/* 
 * UiBank
 *
 * Sample banking API used for demoing UiPath Testing Automation. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: andrei.barbu@uipath.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Customer
    /// </summary>
    [DataContract]
        public partial class Customer :  IEquatable<Customer>, IValidatableObject
    {
        /// <summary>
        /// Title of customer
        /// </summary>
        /// <value>Title of customer</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TitleEnum
        {
            /// <summary>
            /// Enum Mr for value: mr
            /// </summary>
            [EnumMember(Value = "mr")]
            Mr = 0,
            /// <summary>
            /// Enum Mrs for value: mrs
            /// </summary>
            [EnumMember(Value = "mrs")]
            Mrs = 1,
            /// <summary>
            /// Enum Miss for value: miss
            /// </summary>
            [EnumMember(Value = "miss")]
            Miss = 2,
            /// <summary>
            /// Enum Ms for value: ms
            /// </summary>
            [EnumMember(Value = "ms")]
            Ms = 3,
            /// <summary>
            /// Enum Doc for value: doc
            /// </summary>
            [EnumMember(Value = "doc")]
            Doc = 4        }
        /// <summary>
        /// Title of customer
        /// </summary>
        /// <value>Title of customer</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public TitleEnum? Title { get; set; }
        /// <summary>
        /// Gender of customer
        /// </summary>
        /// <value>Gender of customer</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum GenderEnum
        {
            /// <summary>
            /// Enum Male for value: male
            /// </summary>
            [EnumMember(Value = "male")]
            Male = 0,
            /// <summary>
            /// Enum Female for value: female
            /// </summary>
            [EnumMember(Value = "female")]
            Female = 1        }
        /// <summary>
        /// Gender of customer
        /// </summary>
        /// <value>Gender of customer</value>
        [DataMember(Name="gender", EmitDefaultValue=false)]
        public GenderEnum? Gender { get; set; }
        /// <summary>
        /// Defines EmploymentStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum EmploymentStatusEnum
        {
            /// <summary>
            /// Enum Permanent for value: permanent
            /// </summary>
            [EnumMember(Value = "permanent")]
            Permanent = 0,
            /// <summary>
            /// Enum Unemployed for value: unemployed
            /// </summary>
            [EnumMember(Value = "unemployed")]
            Unemployed = 1,
            /// <summary>
            /// Enum Consultant for value: consultant
            /// </summary>
            [EnumMember(Value = "consultant")]
            Consultant = 2        }
        /// <summary>
        /// Gets or Sets EmploymentStatus
        /// </summary>
        [DataMember(Name="employment_status", EmitDefaultValue=false)]
        public EmploymentStatusEnum? EmploymentStatus { get; set; }
        /// <summary>
        /// Defines ResidenceStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ResidenceStatusEnum
        {
            /// <summary>
            /// Enum Resident for value: resident
            /// </summary>
            [EnumMember(Value = "resident")]
            Resident = 0,
            /// <summary>
            /// Enum Foreigner for value: foreigner
            /// </summary>
            [EnumMember(Value = "foreigner")]
            Foreigner = 1        }
        /// <summary>
        /// Gets or Sets ResidenceStatus
        /// </summary>
        [DataMember(Name="residence_status", EmitDefaultValue=false)]
        public ResidenceStatusEnum? ResidenceStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Customer" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="firstName">firstName.</param>
        /// <param name="lastName">lastName.</param>
        /// <param name="middleName">middleName.</param>
        /// <param name="title">Title of customer.</param>
        /// <param name="gender">Gender of customer.</param>
        /// <param name="emailVerified">emailVerified (default to false).</param>
        /// <param name="email">email.</param>
        /// <param name="dateOfBirth">dateOfBirth.</param>
        /// <param name="employmentStatus">employmentStatus.</param>
        /// <param name="residenceStatus">residenceStatus.</param>
        /// <param name="addresses">addresses.</param>
        /// <param name="accountsUrl">accountsUrl.</param>
        /// <param name="selfUrl">selfUrl.</param>
        public Customer(long? id = default(long?), string firstName = default(string), string lastName = default(string), string middleName = default(string), TitleEnum? title = default(TitleEnum?), GenderEnum? gender = default(GenderEnum?), bool? emailVerified = false, string email = default(string), DateTime? dateOfBirth = default(DateTime?), EmploymentStatusEnum? employmentStatus = default(EmploymentStatusEnum?), ResidenceStatusEnum? residenceStatus = default(ResidenceStatusEnum?), List<Address> addresses = default(List<Address>), string accountsUrl = default(string), string selfUrl = default(string))
        {
            this.Id = id;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.MiddleName = middleName;
            this.Title = title;
            this.Gender = gender;
            // use default value if no "emailVerified" provided
            if (emailVerified == null)
            {
                this.EmailVerified = false;
            }
            else
            {
                this.EmailVerified = emailVerified;
            }
            this.Email = email;
            this.DateOfBirth = dateOfBirth;
            this.EmploymentStatus = employmentStatus;
            this.ResidenceStatus = residenceStatus;
            this.Addresses = addresses;
            this.AccountsUrl = accountsUrl;
            this.SelfUrl = selfUrl;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="first_name", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="last_name", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets MiddleName
        /// </summary>
        [DataMember(Name="middle_name", EmitDefaultValue=false)]
        public string MiddleName { get; set; }



        /// <summary>
        /// Gets or Sets EmailVerified
        /// </summary>
        [DataMember(Name="email_verified", EmitDefaultValue=false)]
        public bool? EmailVerified { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets DateOfBirth
        /// </summary>
        [DataMember(Name="date_of_birth", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? DateOfBirth { get; set; }



        /// <summary>
        /// Gets or Sets Addresses
        /// </summary>
        [DataMember(Name="addresses", EmitDefaultValue=false)]
        public List<Address> Addresses { get; set; }

        /// <summary>
        /// Gets or Sets AccountsUrl
        /// </summary>
        [DataMember(Name="accounts_url", EmitDefaultValue=false)]
        public string AccountsUrl { get; set; }

        /// <summary>
        /// Gets or Sets SelfUrl
        /// </summary>
        [DataMember(Name="self_url", EmitDefaultValue=false)]
        public string SelfUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Customer {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  EmailVerified: ").Append(EmailVerified).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  EmploymentStatus: ").Append(EmploymentStatus).Append("\n");
            sb.Append("  ResidenceStatus: ").Append(ResidenceStatus).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  AccountsUrl: ").Append(AccountsUrl).Append("\n");
            sb.Append("  SelfUrl: ").Append(SelfUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Customer);
        }

        /// <summary>
        /// Returns true if Customer instances are equal
        /// </summary>
        /// <param name="input">Instance of Customer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Customer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.MiddleName == input.MiddleName ||
                    (this.MiddleName != null &&
                    this.MiddleName.Equals(input.MiddleName))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Gender == input.Gender ||
                    (this.Gender != null &&
                    this.Gender.Equals(input.Gender))
                ) && 
                (
                    this.EmailVerified == input.EmailVerified ||
                    (this.EmailVerified != null &&
                    this.EmailVerified.Equals(input.EmailVerified))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.DateOfBirth == input.DateOfBirth ||
                    (this.DateOfBirth != null &&
                    this.DateOfBirth.Equals(input.DateOfBirth))
                ) && 
                (
                    this.EmploymentStatus == input.EmploymentStatus ||
                    (this.EmploymentStatus != null &&
                    this.EmploymentStatus.Equals(input.EmploymentStatus))
                ) && 
                (
                    this.ResidenceStatus == input.ResidenceStatus ||
                    (this.ResidenceStatus != null &&
                    this.ResidenceStatus.Equals(input.ResidenceStatus))
                ) && 
                (
                    this.Addresses == input.Addresses ||
                    this.Addresses != null &&
                    input.Addresses != null &&
                    this.Addresses.SequenceEqual(input.Addresses)
                ) && 
                (
                    this.AccountsUrl == input.AccountsUrl ||
                    (this.AccountsUrl != null &&
                    this.AccountsUrl.Equals(input.AccountsUrl))
                ) && 
                (
                    this.SelfUrl == input.SelfUrl ||
                    (this.SelfUrl != null &&
                    this.SelfUrl.Equals(input.SelfUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.MiddleName != null)
                    hashCode = hashCode * 59 + this.MiddleName.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Gender != null)
                    hashCode = hashCode * 59 + this.Gender.GetHashCode();
                if (this.EmailVerified != null)
                    hashCode = hashCode * 59 + this.EmailVerified.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.DateOfBirth != null)
                    hashCode = hashCode * 59 + this.DateOfBirth.GetHashCode();
                if (this.EmploymentStatus != null)
                    hashCode = hashCode * 59 + this.EmploymentStatus.GetHashCode();
                if (this.ResidenceStatus != null)
                    hashCode = hashCode * 59 + this.ResidenceStatus.GetHashCode();
                if (this.Addresses != null)
                    hashCode = hashCode * 59 + this.Addresses.GetHashCode();
                if (this.AccountsUrl != null)
                    hashCode = hashCode * 59 + this.AccountsUrl.GetHashCode();
                if (this.SelfUrl != null)
                    hashCode = hashCode * 59 + this.SelfUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
