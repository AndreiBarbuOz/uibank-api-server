/* 
 * UiBank
 *
 * Sample banking API used for demoing UiPath Testing Automation. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: andrei.barbu@uipath.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// User
    /// </summary>
    [DataContract]
        public partial class User :  IEquatable<User>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="User" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="username">username.</param>
        /// <param name="usernameCanonical">usernameCanonical.</param>
        /// <param name="plainPassword">plainPassword.</param>
        /// <param name="email">email.</param>
        /// <param name="emailCanonical">emailCanonical.</param>
        /// <param name="selfUrl">selfUrl.</param>
        public User(long? id = default(long?), string username = default(string), string usernameCanonical = default(string), string plainPassword = default(string), string email = default(string), string emailCanonical = default(string), string selfUrl = default(string))
        {
            this.Id = id;
            this.Username = username;
            this.UsernameCanonical = usernameCanonical;
            this.PlainPassword = plainPassword;
            this.Email = email;
            this.EmailCanonical = emailCanonical;
            this.SelfUrl = selfUrl;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets UsernameCanonical
        /// </summary>
        [DataMember(Name="username_canonical", EmitDefaultValue=false)]
        public string UsernameCanonical { get; set; }

        /// <summary>
        /// Gets or Sets PlainPassword
        /// </summary>
        [DataMember(Name="plain_password", EmitDefaultValue=false)]
        public string PlainPassword { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets EmailCanonical
        /// </summary>
        [DataMember(Name="email_canonical", EmitDefaultValue=false)]
        public string EmailCanonical { get; set; }

        /// <summary>
        /// Gets or Sets SelfUrl
        /// </summary>
        [DataMember(Name="self_url", EmitDefaultValue=false)]
        public string SelfUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class User {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  UsernameCanonical: ").Append(UsernameCanonical).Append("\n");
            sb.Append("  PlainPassword: ").Append(PlainPassword).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  EmailCanonical: ").Append(EmailCanonical).Append("\n");
            sb.Append("  SelfUrl: ").Append(SelfUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as User);
        }

        /// <summary>
        /// Returns true if User instances are equal
        /// </summary>
        /// <param name="input">Instance of User to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(User input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.UsernameCanonical == input.UsernameCanonical ||
                    (this.UsernameCanonical != null &&
                    this.UsernameCanonical.Equals(input.UsernameCanonical))
                ) && 
                (
                    this.PlainPassword == input.PlainPassword ||
                    (this.PlainPassword != null &&
                    this.PlainPassword.Equals(input.PlainPassword))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.EmailCanonical == input.EmailCanonical ||
                    (this.EmailCanonical != null &&
                    this.EmailCanonical.Equals(input.EmailCanonical))
                ) && 
                (
                    this.SelfUrl == input.SelfUrl ||
                    (this.SelfUrl != null &&
                    this.SelfUrl.Equals(input.SelfUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.UsernameCanonical != null)
                    hashCode = hashCode * 59 + this.UsernameCanonical.GetHashCode();
                if (this.PlainPassword != null)
                    hashCode = hashCode * 59 + this.PlainPassword.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.EmailCanonical != null)
                    hashCode = hashCode * 59 + this.EmailCanonical.GetHashCode();
                if (this.SelfUrl != null)
                    hashCode = hashCode * 59 + this.SelfUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
