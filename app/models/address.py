# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.models.base_model_ import Model
from app import util


class Address(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, date_start: date=None, date_end: date=None, address1: str=None, address2: str=None, town: str=None, state: str=None, postcode: str=None):  # noqa: E501
        """Address - a model defined in Swagger

        :param date_start: The date_start of this Address.  # noqa: E501
        :type date_start: date
        :param date_end: The date_end of this Address.  # noqa: E501
        :type date_end: date
        :param address1: The address1 of this Address.  # noqa: E501
        :type address1: str
        :param address2: The address2 of this Address.  # noqa: E501
        :type address2: str
        :param town: The town of this Address.  # noqa: E501
        :type town: str
        :param state: The state of this Address.  # noqa: E501
        :type state: str
        :param postcode: The postcode of this Address.  # noqa: E501
        :type postcode: str
        """
        self.swagger_types = {
            'date_start': date,
            'date_end': date,
            'address1': str,
            'address2': str,
            'town': str,
            'state': str,
            'postcode': str
        }

        self.attribute_map = {
            'date_start': 'date_start',
            'date_end': 'date_end',
            'address1': 'address1',
            'address2': 'address2',
            'town': 'town',
            'state': 'state',
            'postcode': 'postcode'
        }
        self._date_start = date_start
        self._date_end = date_end
        self._address1 = address1
        self._address2 = address2
        self._town = town
        self._state = state
        self._postcode = postcode

    @classmethod
    def from_dict(cls, dikt) -> 'Address':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Address of this Address.  # noqa: E501
        :rtype: Address
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_start(self) -> date:
        """Gets the date_start of this Address.


        :return: The date_start of this Address.
        :rtype: date
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start: date):
        """Sets the date_start of this Address.


        :param date_start: The date_start of this Address.
        :type date_start: date
        """

        self._date_start = date_start

    @property
    def date_end(self) -> date:
        """Gets the date_end of this Address.


        :return: The date_end of this Address.
        :rtype: date
        """
        return self._date_end

    @date_end.setter
    def date_end(self, date_end: date):
        """Sets the date_end of this Address.


        :param date_end: The date_end of this Address.
        :type date_end: date
        """

        self._date_end = date_end

    @property
    def address1(self) -> str:
        """Gets the address1 of this Address.


        :return: The address1 of this Address.
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1: str):
        """Sets the address1 of this Address.


        :param address1: The address1 of this Address.
        :type address1: str
        """

        self._address1 = address1

    @property
    def address2(self) -> str:
        """Gets the address2 of this Address.


        :return: The address2 of this Address.
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2: str):
        """Sets the address2 of this Address.


        :param address2: The address2 of this Address.
        :type address2: str
        """

        self._address2 = address2

    @property
    def town(self) -> str:
        """Gets the town of this Address.


        :return: The town of this Address.
        :rtype: str
        """
        return self._town

    @town.setter
    def town(self, town: str):
        """Sets the town of this Address.


        :param town: The town of this Address.
        :type town: str
        """

        self._town = town

    @property
    def state(self) -> str:
        """Gets the state of this Address.


        :return: The state of this Address.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """Sets the state of this Address.


        :param state: The state of this Address.
        :type state: str
        """

        self._state = state

    @property
    def postcode(self) -> str:
        """Gets the postcode of this Address.


        :return: The postcode of this Address.
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode: str):
        """Sets the postcode of this Address.


        :param postcode: The postcode of this Address.
        :type postcode: str
        """

        self._postcode = postcode
