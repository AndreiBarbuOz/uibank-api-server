# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.models.base_model_ import Model
from app import util


class RequestAccount(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, date_start: int=None, friendly_name: str=None, account_type: str=None):  # noqa: E501
        """RequestAccount - a model defined in Swagger

        :param date_start: The date_start of this RequestAccount.  # noqa: E501
        :type date_start: int
        :param friendly_name: The friendly_name of this RequestAccount.  # noqa: E501
        :type friendly_name: str
        :param account_type: The account_type of this RequestAccount.  # noqa: E501
        :type account_type: str
        """
        self.swagger_types = {
            'date_start': int,
            'friendly_name': str,
            'account_type': str
        }

        self.attribute_map = {
            'date_start': 'date_start',
            'friendly_name': 'friendly_name',
            'account_type': 'account_type'
        }
        self._date_start = date_start
        self._friendly_name = friendly_name
        self._account_type = account_type

    @classmethod
    def from_dict(cls, dikt) -> 'RequestAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RequestAccount of this RequestAccount.  # noqa: E501
        :rtype: RequestAccount
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_start(self) -> int:
        """Gets the date_start of this RequestAccount.


        :return: The date_start of this RequestAccount.
        :rtype: int
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start: int):
        """Sets the date_start of this RequestAccount.


        :param date_start: The date_start of this RequestAccount.
        :type date_start: int
        """
        if date_start is None:
            raise ValueError("Invalid value for `date_start`, must not be `None`")  # noqa: E501

        self._date_start = date_start

    @property
    def friendly_name(self) -> str:
        """Gets the friendly_name of this RequestAccount.


        :return: The friendly_name of this RequestAccount.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name: str):
        """Sets the friendly_name of this RequestAccount.


        :param friendly_name: The friendly_name of this RequestAccount.
        :type friendly_name: str
        """
        if friendly_name is None:
            raise ValueError("Invalid value for `friendly_name`, must not be `None`")  # noqa: E501

        self._friendly_name = friendly_name

    @property
    def account_type(self) -> str:
        """Gets the account_type of this RequestAccount.


        :return: The account_type of this RequestAccount.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type: str):
        """Sets the account_type of this RequestAccount.


        :param account_type: The account_type of this RequestAccount.
        :type account_type: str
        """
        allowed_values = ["checking", "savings"]  # noqa: E501
        if account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `account_type` ({0}), must be one of {1}"
                .format(account_type, allowed_values)
            )

        self._account_type = account_type
