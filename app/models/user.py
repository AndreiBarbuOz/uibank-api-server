# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.models.base_model_ import Model
import re  # noqa: F401,E501
from app import util


class User(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, username: str=None, username_canonical: str=None, email: str=None, email_canonical: str=None, self_url: str=None):  # noqa: E501
        """User - a model defined in Swagger

        :param id: The id of this User.  # noqa: E501
        :type id: str
        :param username: The username of this User.  # noqa: E501
        :type username: str
        :param username_canonical: The username_canonical of this User.  # noqa: E501
        :type username_canonical: str
        :param email: The email of this User.  # noqa: E501
        :type email: str
        :param email_canonical: The email_canonical of this User.  # noqa: E501
        :type email_canonical: str
        :param self_url: The self_url of this User.  # noqa: E501
        :type self_url: str
        """
        self.swagger_types = {
            'id': str,
            'username': str,
            'username_canonical': str,
            'email': str,
            'email_canonical': str,
            'self_url': str
        }

        self.attribute_map = {
            'id': 'id',
            'username': 'username',
            'username_canonical': 'username_canonical',
            'email': 'email',
            'email_canonical': 'email_canonical',
            'self_url': 'self_url'
        }
        self._id = id
        self._username = username
        self._username_canonical = username_canonical
        self._email = email
        self._email_canonical = email_canonical
        self._self_url = self_url

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this User.


        :return: The id of this User.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this User.


        :param id: The id of this User.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def username(self) -> str:
        """Gets the username of this User.


        :return: The username of this User.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this User.


        :param username: The username of this User.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def username_canonical(self) -> str:
        """Gets the username_canonical of this User.


        :return: The username_canonical of this User.
        :rtype: str
        """
        return self._username_canonical

    @username_canonical.setter
    def username_canonical(self, username_canonical: str):
        """Sets the username_canonical of this User.


        :param username_canonical: The username_canonical of this User.
        :type username_canonical: str
        """

        self._username_canonical = username_canonical

    @property
    def email(self) -> str:
        """Gets the email of this User.


        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this User.


        :param email: The email of this User.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def email_canonical(self) -> str:
        """Gets the email_canonical of this User.


        :return: The email_canonical of this User.
        :rtype: str
        """
        return self._email_canonical

    @email_canonical.setter
    def email_canonical(self, email_canonical: str):
        """Sets the email_canonical of this User.


        :param email_canonical: The email_canonical of this User.
        :type email_canonical: str
        """

        self._email_canonical = email_canonical

    @property
    def self_url(self) -> str:
        """Gets the self_url of this User.


        :return: The self_url of this User.
        :rtype: str
        """
        return self._self_url

    @self_url.setter
    def self_url(self, self_url: str):
        """Sets the self_url of this User.


        :param self_url: The self_url of this User.
        :type self_url: str
        """

        self._self_url = self_url
