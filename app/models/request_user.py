# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.models.base_model_ import Model
import re  # noqa: F401,E501
from app import util


class RequestUser(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, first_name: str=None, last_name: str=None, username: str=None, plain_password: str=None, email: str=None):  # noqa: E501
        """RequestUser - a model defined in Swagger

        :param first_name: The first_name of this RequestUser.  # noqa: E501
        :type first_name: str
        :param last_name: The last_name of this RequestUser.  # noqa: E501
        :type last_name: str
        :param username: The username of this RequestUser.  # noqa: E501
        :type username: str
        :param plain_password: The plain_password of this RequestUser.  # noqa: E501
        :type plain_password: str
        :param email: The email of this RequestUser.  # noqa: E501
        :type email: str
        """
        self.swagger_types = {
            'first_name': str,
            'last_name': str,
            'username': str,
            'plain_password': str,
            'email': str
        }

        self.attribute_map = {
            'first_name': 'first_name',
            'last_name': 'last_name',
            'username': 'username',
            'plain_password': 'plain_password',
            'email': 'email'
        }
        self._first_name = first_name
        self._last_name = last_name
        self._username = username
        self._plain_password = plain_password
        self._email = email

    @classmethod
    def from_dict(cls, dikt) -> 'RequestUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RequestUser of this RequestUser.  # noqa: E501
        :rtype: RequestUser
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first_name(self) -> str:
        """Gets the first_name of this RequestUser.


        :return: The first_name of this RequestUser.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name: str):
        """Sets the first_name of this RequestUser.


        :param first_name: The first_name of this RequestUser.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self) -> str:
        """Gets the last_name of this RequestUser.


        :return: The last_name of this RequestUser.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name: str):
        """Sets the last_name of this RequestUser.


        :param last_name: The last_name of this RequestUser.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def username(self) -> str:
        """Gets the username of this RequestUser.


        :return: The username of this RequestUser.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this RequestUser.


        :param username: The username of this RequestUser.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def plain_password(self) -> str:
        """Gets the plain_password of this RequestUser.


        :return: The plain_password of this RequestUser.
        :rtype: str
        """
        return self._plain_password

    @plain_password.setter
    def plain_password(self, plain_password: str):
        """Sets the plain_password of this RequestUser.


        :param plain_password: The plain_password of this RequestUser.
        :type plain_password: str
        """
        if plain_password is None:
            raise ValueError("Invalid value for `plain_password`, must not be `None`")  # noqa: E501

        self._plain_password = plain_password

    @property
    def email(self) -> str:
        """Gets the email of this RequestUser.


        :return: The email of this RequestUser.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this RequestUser.


        :param email: The email of this RequestUser.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email
