# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.models.base_model_ import Model
from app.models.address import Address  # noqa: F401,E501
from app import util


class RequestCustomer(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, first_name: str=None, last_name: str=None, middle_name: str=None, title: str=None, gender: str=None, email: str=None, date_of_birth: date=None, employment_status: str=None, residence_status: str=None, addresses: List[Address]=None, plain_password: str=None):  # noqa: E501
        """RequestCustomer - a model defined in Swagger

        :param first_name: The first_name of this RequestCustomer.  # noqa: E501
        :type first_name: str
        :param last_name: The last_name of this RequestCustomer.  # noqa: E501
        :type last_name: str
        :param middle_name: The middle_name of this RequestCustomer.  # noqa: E501
        :type middle_name: str
        :param title: The title of this RequestCustomer.  # noqa: E501
        :type title: str
        :param gender: The gender of this RequestCustomer.  # noqa: E501
        :type gender: str
        :param email: The email of this RequestCustomer.  # noqa: E501
        :type email: str
        :param date_of_birth: The date_of_birth of this RequestCustomer.  # noqa: E501
        :type date_of_birth: date
        :param employment_status: The employment_status of this RequestCustomer.  # noqa: E501
        :type employment_status: str
        :param residence_status: The residence_status of this RequestCustomer.  # noqa: E501
        :type residence_status: str
        :param addresses: The addresses of this RequestCustomer.  # noqa: E501
        :type addresses: List[Address]
        :param plain_password: The plain_password of this RequestCustomer.  # noqa: E501
        :type plain_password: str
        """
        self.swagger_types = {
            'first_name': str,
            'last_name': str,
            'middle_name': str,
            'title': str,
            'gender': str,
            'email': str,
            'date_of_birth': date,
            'employment_status': str,
            'residence_status': str,
            'addresses': List[Address],
            'plain_password': str
        }

        self.attribute_map = {
            'first_name': 'first_name',
            'last_name': 'last_name',
            'middle_name': 'middle_name',
            'title': 'title',
            'gender': 'gender',
            'email': 'email',
            'date_of_birth': 'date_of_birth',
            'employment_status': 'employment_status',
            'residence_status': 'residence_status',
            'addresses': 'addresses',
            'plain_password': 'plain_password'
        }
        self._first_name = first_name
        self._last_name = last_name
        self._middle_name = middle_name
        self._title = title
        self._gender = gender
        self._email = email
        self._date_of_birth = date_of_birth
        self._employment_status = employment_status
        self._residence_status = residence_status
        self._addresses = addresses
        self._plain_password = plain_password

    @classmethod
    def from_dict(cls, dikt) -> 'RequestCustomer':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RequestCustomer of this RequestCustomer.  # noqa: E501
        :rtype: RequestCustomer
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first_name(self) -> str:
        """Gets the first_name of this RequestCustomer.


        :return: The first_name of this RequestCustomer.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name: str):
        """Sets the first_name of this RequestCustomer.


        :param first_name: The first_name of this RequestCustomer.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self) -> str:
        """Gets the last_name of this RequestCustomer.


        :return: The last_name of this RequestCustomer.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name: str):
        """Sets the last_name of this RequestCustomer.


        :param last_name: The last_name of this RequestCustomer.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def middle_name(self) -> str:
        """Gets the middle_name of this RequestCustomer.


        :return: The middle_name of this RequestCustomer.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name: str):
        """Sets the middle_name of this RequestCustomer.


        :param middle_name: The middle_name of this RequestCustomer.
        :type middle_name: str
        """

        self._middle_name = middle_name

    @property
    def title(self) -> str:
        """Gets the title of this RequestCustomer.

        Title of customer  # noqa: E501

        :return: The title of this RequestCustomer.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this RequestCustomer.

        Title of customer  # noqa: E501

        :param title: The title of this RequestCustomer.
        :type title: str
        """
        allowed_values = ["mr", "mrs", "miss", "ms", "doc"]  # noqa: E501
        if title not in allowed_values:
            raise ValueError(
                "Invalid value for `title` ({0}), must be one of {1}"
                .format(title, allowed_values)
            )

        self._title = title

    @property
    def gender(self) -> str:
        """Gets the gender of this RequestCustomer.

        Gender of customer  # noqa: E501

        :return: The gender of this RequestCustomer.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender: str):
        """Sets the gender of this RequestCustomer.

        Gender of customer  # noqa: E501

        :param gender: The gender of this RequestCustomer.
        :type gender: str
        """
        allowed_values = ["male", "female"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def email(self) -> str:
        """Gets the email of this RequestCustomer.


        :return: The email of this RequestCustomer.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this RequestCustomer.


        :param email: The email of this RequestCustomer.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def date_of_birth(self) -> date:
        """Gets the date_of_birth of this RequestCustomer.


        :return: The date_of_birth of this RequestCustomer.
        :rtype: date
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth: date):
        """Sets the date_of_birth of this RequestCustomer.


        :param date_of_birth: The date_of_birth of this RequestCustomer.
        :type date_of_birth: date
        """
        if date_of_birth is None:
            raise ValueError("Invalid value for `date_of_birth`, must not be `None`")  # noqa: E501

        self._date_of_birth = date_of_birth

    @property
    def employment_status(self) -> str:
        """Gets the employment_status of this RequestCustomer.


        :return: The employment_status of this RequestCustomer.
        :rtype: str
        """
        return self._employment_status

    @employment_status.setter
    def employment_status(self, employment_status: str):
        """Sets the employment_status of this RequestCustomer.


        :param employment_status: The employment_status of this RequestCustomer.
        :type employment_status: str
        """
        allowed_values = ["permanent", "unemployed", "consultant"]  # noqa: E501
        if employment_status not in allowed_values:
            raise ValueError(
                "Invalid value for `employment_status` ({0}), must be one of {1}"
                .format(employment_status, allowed_values)
            )

        self._employment_status = employment_status

    @property
    def residence_status(self) -> str:
        """Gets the residence_status of this RequestCustomer.


        :return: The residence_status of this RequestCustomer.
        :rtype: str
        """
        return self._residence_status

    @residence_status.setter
    def residence_status(self, residence_status: str):
        """Sets the residence_status of this RequestCustomer.


        :param residence_status: The residence_status of this RequestCustomer.
        :type residence_status: str
        """
        allowed_values = ["resident", "foreigner"]  # noqa: E501
        if residence_status not in allowed_values:
            raise ValueError(
                "Invalid value for `residence_status` ({0}), must be one of {1}"
                .format(residence_status, allowed_values)
            )

        self._residence_status = residence_status

    @property
    def addresses(self) -> List[Address]:
        """Gets the addresses of this RequestCustomer.


        :return: The addresses of this RequestCustomer.
        :rtype: List[Address]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses: List[Address]):
        """Sets the addresses of this RequestCustomer.


        :param addresses: The addresses of this RequestCustomer.
        :type addresses: List[Address]
        """

        self._addresses = addresses

    @property
    def plain_password(self) -> str:
        """Gets the plain_password of this RequestCustomer.


        :return: The plain_password of this RequestCustomer.
        :rtype: str
        """
        return self._plain_password

    @plain_password.setter
    def plain_password(self, plain_password: str):
        """Sets the plain_password of this RequestCustomer.


        :param plain_password: The plain_password of this RequestCustomer.
        :type plain_password: str
        """
        if plain_password is None:
            raise ValueError("Invalid value for `plain_password`, must not be `None`")  # noqa: E501

        self._plain_password = plain_password
